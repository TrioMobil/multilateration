Mathematics for triangulating position.

Given an unknown point (a,b,c) number of observations

(x_1, y_1, z_1, d_1) ... (x_i, y_i, z_i, d_i) ... (x_n, y_n, z_n, d_n)

where (x_i, y_i, z_i) are the coordinates and d_i is the estimated distance to (a,b,c).

The error for each observation is given D_i - d_n, where D_i is the distance between (x_i,y_i,z_i) and the final estimation of (a,b)

D_i = sqrt( (a-x_i)^2 + (b-y_i)^2 + (c-z_i)^2 )

The squared error function for each observation

S_i(a,b)
= ( D_i - d_i )^2
= ( sqrt( (a-x)^2 + (b-y)^2 + (c-z)^2 ) - d )^2
### where x,y,z,d are of observation i

The total squared error

S = SUM( S_i ) for all i..n

We calculate the partial derivatives for each observation

dS_i/da
= -2*d*(a-x)/sqrt(x^2-2*a*x+y^2-2*b*y+z^2-2*c*z+a^2+b^2+c^2)+2*a-2*x

### where x,y,z,d are of observations i
to get dS_i/db, use the equation above and swap a <--> b and x_i <--> y_i
to get dS_i/dc, use the equation above and swap a <--> c and x_i <--> z_i

The partial derivatives for the total squared function

dS/da = SUM( dS_i/da ) for i..n
dS/db = SUM( dS_i/db ) for i..n
dS/dc = SUM( dS_i/dc ) for i..n

===

Now we want to find the minima for the following set of equations by Newton Raphson method

dS/da = f_1([a,b,c]) = 0
dS/db = f_2([a,b,c]) = 0
dS/dc = f_3([a,b,c]) = 0

We pick a starting estimate (a_0, b_0, c_0), and we do the following iteration

We define the Jacobian

J_S([a     [ df_1/da  df_1/db  df_1/dc
     b       df_2/da  df_2/db  df_2/dc
     c]) =   df_3/da  df_3/db  df_3/dc ]

===

a. df_1/da = d2S/da2 = SUM -2*d*(a-x)*(x-a)/(x^2-2*a*x+y^2-2*b*y+z^2-2*c*z+a^2+b^2+c^2)^(3/2)-2*d/sqrt(x^2-2*a*x+y^2-2*b*y+z^2-2*c*z+a^2+b^2+c^2)+2
b. df_1/db = d2S/dbda = SUM -2*d*(a-x)*(y-b)/(x^2-2*a*x+y^2-2*b*y+z^2-2*c*z+a^2+b^2+c^2)^(3/2)
c. df_1/dc = d2S/dcda = use (b) swap b <--> c, y <--> z
d. df_2/da = d2S/dadb = use (b) swap a <--> b, x <--> y
e. df_2/db = d2S/db2 = use (a) swap a <--> b
f. df_2/dc = d2S/dcdb = use (b) replace a --> b, x --> y, b --> c, y --> z, c --> a, z --> x
g. df_3/da = d2S/dadc = use (b) replace a --> c, x --> z, b --> a, y --> x, c --> b, z --> y
h. df_3/db = d2S/dbdc = use (b) swap a <--> c, x <--> z
i. df_3/dc = d2S/dc2 = use (a) swap a <--> c

===

[ a_n+1    =   [ a_n    - J_S_inverse([ a_n       [ f_1([a,b,c])
  b_n+1          b_n                    b_n         f_2([a,b,c])
  c_n+1 ]        c_n ]                  c_n ])      f_3([a,b,c]) ]